<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>OldLostGuy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jeremylj.github.io/"/>
  <updated>2021-01-03T13:28:01.175Z</updated>
  <id>https://jeremylj.github.io/</id>
  
  <author>
    <name>JeremyLJ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过SSH连接GitHub</title>
    <link href="https://jeremylj.github.io/2021/01/01/connect-github-by-ssh/"/>
    <id>https://jeremylj.github.io/2021/01/01/connect-github-by-ssh/</id>
    <published>2021-01-01T10:48:53.000Z</published>
    <updated>2021-01-03T13:28:01.175Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直使用账号密码的方式连接GitHub，进行远程仓库代码的拉取和推送，因为账号密码认证的小窗口会记住账号密码，所以感觉也还挺方便的。不过GitHub出了新规：Git操作的身份验证将放弃密码<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>，改用令牌或SSH密钥<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。下面截图是博主最近使用密码进行GitHub认证后，GitHub注册邮箱收到的一封提醒邮件。<br><img src="github_credential.PNG" alt="GitHub账号密码认证"><br><img src="github_pwd_deprecition.PNG" alt="GitHub将停止密码认证"></p><p>目前虽然还是能通过输入账号密码进行GitHub认证，但是最近博主发现在弹出窗口即使输入了正确的账号密码依然认证失败，必须得在接下来的Git命令行再次输入账号密码才能验证通过。这样每次提交或拉取远程仓库的代码就不那么方便了。</p><p>那我们就来看看如何通过SSH连接GitHub，它真的有那么香吗？！</p><p>话不多说，我们直接去找官方文档试验一把，官方文档可以通过登录GitHub后，进入个人设置，打开SSH and GPG keys菜单，发现<code>SSH keys</code>下面有句话，点击打开<code>generating SSH keys</code>链接即是文档说明。你也可以直接打开本文底部的链接<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。<br><img src="github_generate_ssh.PNG" alt="找到生成SSH key文档链接"></p><h3 id="SSH协议和SSH-keys"><a class="header-anchor" href="#SSH协议和SSH-keys">¶</a>SSH协议和SSH keys</h3><p>文档<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup>描述的还是非常清楚的，首先说明了SSH协议和SSH key：使用SSH协议可以连接和认证远程服务器和服务。使用SSH keys可以在连接GitHub时，不用每次都输入用户名和密码。</p><p><em><strong>说明：以下操作均是基于Windows，Mac或Linux请参考文档的相应说明。</strong></em></p><h3 id="检查本机是否存在SSH-keys"><a class="header-anchor" href="#检查本机是否存在SSH-keys">¶</a>检查本机是否存在SSH keys</h3><p>在生成新的SSH keys之前，我们可以看下之前是否有意或无意的生成过。</p><ol><li>打开Git Bash命令行窗口，输入如下命令: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -al ~&#x2F;.ssh</span><br></pre></td></tr></table></figure></li><li>看一下输出内容里有没有*.pub后缀的文件名，类似以下的这些文件：<ul><li>id_rsa.pub</li><li>id_ecdsa.pub</li><li>id_ed25519.pub</li></ul></li><li>如果有的话，说明以前生成过SSH keys，就不用重新生成了，可以直接进入<code>将SSH key添加到ssh-agent</code>步骤。如果看到如下的输入内容，说明没有现成的SSH public keys，那我们就生成一个新的SSH key。<br><img src="check_ssh_key_exist.PNG" alt=""></li></ol><h3 id="生成新的SSH-key"><a class="header-anchor" href="#生成新的SSH-key">¶</a>生成新的SSH key</h3><ol><li><p>打开Git Bash或者在上一步打开的命令行窗口继续</p></li><li><p>输入下面一行命令，注意邮箱为你注册的GitHub邮箱。另外该命令执行过程中有3处需要交互的输入确认。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t ed25519 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure></li><li><p>第一个交互输入确认是存放SSH key文件的路径<code>Enter file in which to save the key</code>，一般来说只要直接按回车Enter键保留默认配置就行了，比如博主的默认存放文件具体位置如下图：<br><img src="ssh_key_location.PNG" alt=""></p><p><em>上面截图的是私钥/公钥对，带有pub后缀的为公钥文件。</em></p></li><li><p>第二和第三个交互输入确认是录入SSH key的密码，以及再次确认。这里我们可以输入自己能记住而又相对安全的密码。</p></li><li><p>新的SSH key生成成功将会看到如下的输出内容：<br><img src="generate_ssh_key.PNG" alt=""></p></li></ol><h3 id="将SSH-key添加到GitHub账号"><a class="header-anchor" href="#将SSH-key添加到GitHub账号">¶</a>将SSH key添加到GitHub账号</h3><ol><li><p>将SSH key的公钥复制到粘贴板，可以执行如下命令，也可以直接打开文件进行复制：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; ~&#x2F;.ssh&#x2F;id_ed25519.pub</span><br></pre></td></tr></table></figure></li><li><p>使用上面用来生成SSH key的邮箱登录GitHub后，进入个人设置，打开SSH and GPG keys菜单，点击SSH Keys旁边的<code>New SSH Key</code>，将SSH key粘贴进去。标题设置，可以按home、work分，也可以按PC、Notepad分，完全看个人喜好了。<br><img src="add_ssh_key.PNG" alt=""></p></li><li><p>点击<code>Add SSH key</code>完成添加，如果需要，按要求输入GitHub密码即可。</p></li></ol><h3 id="测试SSH连接"><a class="header-anchor" href="#测试SSH连接">¶</a>测试SSH连接</h3><p>当我们创建好SSH key并且添加到GitHub之后，可以测试下SSH连接是否正常。</p><ol><li>依然在Git Bash命令行，执行命令来尝试连接到GitHub <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li>当看到是否继续连接确认时，输入[<strong>yes</strong>]，然后看到如下输出内容时，说明连接设置成功了。<br><img src="test_ssh_connection.PNG" alt=""></li></ol><h3 id="体验SSH-key连接"><a class="header-anchor" href="#体验SSH-key连接">¶</a>体验SSH key连接</h3><ol><li><p>我们直接在已有的代码文件夹下，右键打开Git Bash命令行，熟练的输入git pull，看看能否正常执行。哎，不对啊，怎么还是弹出之前那个需要输入GitHub账号密码的弹窗啊。我们通过执行如下命令，来看下目前连接GitHub的方式。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>我们看到输出是类似如下的内容，原来是因为连接GitHub代码库的方式还是Https的方式。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  https:&#x2F;&#x2F;github.com&#x2F;jeremyLJ&#x2F;repository.git (fetch)    </span><br><span class="line">origin  https:&#x2F;&#x2F;github.com&#x2F;jeremyLJ&#x2F;repository.git (push)</span><br></pre></td></tr></table></figure></li><li><p>那我们看下如何将原来通过https连接代码库的方式换成通过SSH的方式。</p><ul><li><p>我们先到GitHub上响应的代码仓库里找到SSH的连接字符，然后复制下来，如下图<br><img src="ssh_conn_string.PNG" alt=""></p></li><li><p>执行下面一行命令来修改连接方式</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:jeremyLJ&#x2F;privateLab.git</span><br></pre></td></tr></table></figure></li></ul></li><li><p>现在我们再执行下<code>git remote -v</code>命令，就会发现连接GitHub代码库已经变成了SSH的方式（如下图）。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">origin  git@github.com:jeremyLJ&#x2F;privateLab.git (fetch)</span><br><span class="line">origin  git@github.com:jeremyLJ&#x2F;privateLab.git (push)</span><br></pre></td></tr></table></figure></li><li><p>这时我们再通过<code>git pull</code>命令来拉取远程仓库的更新，就会看到提示需要输入SSH key设置的密码，当输入正确的密码后，git命令就可以执行成功了。<br><img src="enter_ssh_pwd.PNG" alt=""></p></li><li><p>但是我们发现每次执行远程仓库相关的git命令都需要输入SSH key的密码，参考上面的截图，这的确比较安全，但是确实有点不太方便，那有没有办法不用每次都输入SSH key的密码呢？答案是肯定的。</p></li></ol><h3 id="将SSH-key添加到ssh-agent"><a class="header-anchor" href="#将SSH-key添加到ssh-agent">¶</a>将SSH key添加到ssh-agent</h3><p>可以通过在Git Bash窗口，手动启动ssh代理，并将SSH key添加进来，做到在<strong>当前</strong>Git Bash窗口<strong>只输入一次</strong>SSH key密码。</p><ol><li>打开代码库所在路径的Git Bash窗口，并在同一窗口执行下面一行命令来启动SSH代理。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &#96;ssh-agent -s&#96;</span><br></pre></td></tr></table></figure></li><li>依然是同一Git Bash窗口，将新生成的SSH key文件添加到SSH代理，需要输入生成SSH key第4步设置的密码。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~&#x2F;.ssh&#x2F;id_ed25519</span><br></pre></td></tr></table></figure></li><li>后面执行git pull以及git push就不用再次输入SSH key的密码了。</li></ol><p>现在看下来，虽然我们不用每次都输入SSH key的密码，只用输入一次，但是每次打开Git Bash窗口都需要手动启动SSH代理，并添加SSH key文件，感觉还是不太方便，那能不能自动的完成同样的操作呢？答案是可以的，通过配置脚本。</p><h3 id="Windows上自动启动SSH代理"><a class="header-anchor" href="#Windows上自动启动SSH代理">¶</a>Windows上自动启动SSH代理</h3><p>根据官方文档<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>的说明，通过配置可以在打开Git Bash或者Git Shell的时候自动运行SSH代理。具体的配置方法如下。</p><ol><li><p>复制以下内容并以文件名<code>.profile</code>保存到当前用户文件夹下，路径C:\Users&lt;当前用户名&gt;\</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">env=~/.ssh/agent.env</span><br><span class="line"></span><br><span class="line">agent_load_env () &#123; test -f "$env" &amp;&amp; . "$env" &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line">agent_start () &#123;</span><br><span class="line">    (umask 077; ssh-agent &gt;| "$env")</span><br><span class="line">    . "$env" &gt;| /dev/null ; &#125;</span><br><span class="line"></span><br><span class="line">agent_load_env</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2= agent not running</span></span><br><span class="line">agent_run_state=$(ssh-add -l &gt;| /dev/null 2&gt;&amp;1; echo $?)</span><br><span class="line"></span><br><span class="line">if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then</span><br><span class="line">    agent_start</span><br><span class="line">    ssh-add</span><br><span class="line">elif [ "$SSH_AUTH_SOCK" ] &amp;&amp; [ $agent_run_state = 1 ]; then</span><br><span class="line">    ssh-add</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">unset env</span><br></pre></td></tr></table></figure></li><li><p>再打开Git Bash窗口时，就会直接提示输入SSH key的密码，验证通过后，后续的git pull以及git push等命令将不再需要验证SSH key，如图所示。<br><img src="ssh_agent_auto.PNG" alt=""></p><ul><li>这样在其他新开的Git Bash窗口中执行git命令也都不需要验证SSH key密码了，即使把一开始输入SSH key已启动SSH代理的Git Bash窗口关掉，也依然可以不用验证SSH key密码。</li><li>当然每次重启电脑后，再次打开Git Bash还是需要验证SSH key密码的。</li></ul></li></ol><p>目前来看，在Git Bash中借助自动启动SSH代理来一次性验证SSH连接已经比较方便了，毕竟每次重启电脑才需要再次输入SSH key密码进行SSH连接验证。但是大家都知道一些集成开发工具IDE也集成或支持Git插件，比如博主在Visual Studio Code中直接通过界面进行代码的Pull操作，发现git拉取远程仓库失败，报一个类似如下的错误。<br><img src="vscode_git_fail.PNG" alt=""></p><p>这个错误是什么意思呢，其实通过在终端窗口里执行git pull发现还是因为需要输入SSH key密码的问题，当输入了正确的SSH key密码后，git命令就执行成功了。<br><img src="vscode_git_ssh_key.PNG" alt=""></p><p>对于习惯通过界面进行git拉取和推送操作的小伙伴肯定觉得太不方便了，这时候还有最后一招就是把SSH key的密码重置，就是不设置密码，那样每次就不用验证了，不就一劳永逸了嘛！</p><h3 id="如何修改SSH-key密码"><a class="header-anchor" href="#如何修改SSH-key密码">¶</a>如何修改SSH key密码</h3><ol><li><p>我们可以通过命令<code>ssh-keygen -p</code>来修改或设置SSH key的密码。如果Git Bash当前所在的路径不在<code>C:\Users\&lt;当前用户名&gt;\.ssh</code>下的话，文件路径那里需要提供SSH私钥文件的完成路径，不然会报文件或路径不存在的错误。<br><img src="change_ssh_key_pwd.PNG" alt=""></p></li><li><p>新的SSH key密码输入和密码确认都是直接回车，表示没有密码。<br><strong>注意：去掉SSH key密码设置，虽然会带来一定的操作便捷性，同时安全性也就降低了，请大家自行判断！</strong></p></li><li><p>现在再去Visual Studio Code的界面执行git拉取或推送操作，就可以直接成功了，当然Git Bash也不再需要验证SSH key的密码了。</p></li></ol><h3 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h3><p>关于通过SSH连接GitHub的分享就差不多了，如果大家在实际操作过程中遇到其他的问题，可以参考官方的问题排查文档链接<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>，里面列举了一些尝尽的错误答疑。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://developer.github.com/changes/2020-02-14-deprecating-password-auth/" target="_blank" rel="noopener">Deprecating password authentication</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/" target="_blank" rel="noopener">https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://docs.github.com/articles/generating-an-ssh-key/" target="_blank" rel="noopener">https://docs.github.com/articles/generating-an-ssh-key/</a> <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-git-for-windows" target="_blank" rel="noopener">https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/working-with-ssh-key-passphrases#auto-launching-ssh-agent-on-git-for-windows</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/troubleshooting-ssh" target="_blank" rel="noopener">Trouble shooting</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前一直使用账号密码的方式连接GitHub，进行远程仓库代码的拉取和推送，因为账号密码认证的小窗口会记住账号密码，所以感觉也还挺方便的。不过GitHub出了新规：Git操作的身份验证将放弃密码&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; 
      
    
    </summary>
    
    
    
      <category term="git" scheme="https://jeremylj.github.io/tags/git/"/>
    
      <category term="github" scheme="https://jeremylj.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>AspNetCore集成gRPC体验</title>
    <link href="https://jeremylj.github.io/2020/12/30/aspnetcore_grpc_start/"/>
    <id>https://jeremylj.github.io/2020/12/30/aspnetcore_grpc_start/</id>
    <published>2020-12-30T14:07:18.000Z</published>
    <updated>2021-01-01T09:27:17.444Z</updated>
    
    <content type="html"><![CDATA[<p>gRPC最早是由Google开发，是一款现代、开源、高性能的RPC框架。默认gRPC使用Protocol Buffer作为服务的接口定义语言（Interface Definition Language, IDL）和信息交换格式，支持多种语言，支持客户端、服务器以及双向流式调用处理<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。</p><p>下面我们一起来看下如何基于AspNetCore来创建一个gRPC服务端（基于Windows10机器）。</p><h3 id="环境准备"><a class="header-anchor" href="#环境准备">¶</a>环境准备</h3><ul><li>Visual Studio 2019 16.4及以上版本 （当然也可以使用Visual Studio Code来开发）</li><li>dotNetCore SDK 3.1及以上版本</li></ul><p>博主使用的环境说明：</p><ul><li>Visual Studio 2019 Professional具体版本为：Version 16.5.5</li><li>安装的dotnet sdk版本信息如下：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;dotnet --list-sdks</span><br><span class="line">2.1.505 [C:\Program Files\dotnet\sdk]</span><br><span class="line">2.2.110 [C:\Program Files\dotnet\sdk]</span><br><span class="line">2.2.207 [C:\Program Files\dotnet\sdk]</span><br><span class="line">3.1.202 [C:\Program Files\dotnet\sdk]</span><br></pre></td></tr></table></figure></li></ul><h3 id="通过项目模板创建gRPC服务端"><a class="header-anchor" href="#通过项目模板创建gRPC服务端">¶</a>通过项目模板创建gRPC服务端</h3><ol><li><p>使用Visual Studio的gRPC模板快速创建包含默认实现的gRPC服务<br>通过输入<code>grpc</code>关键字选择项目模板<br><img src="vs_grpc_start_one.PNG" alt="第1步"></p></li><li><p>设置项目名称和文件存放路径<br><img src="vs_grpc_start_two.PNG" alt="第2步"></p></li><li><p>不需要设置Authentication，不需启用Docker Support，直接下一步<br><img src="vs_grpc_start_three.PNG" alt="第3步"></p></li><li><p>这样一个AspNetCore gRPC项目就创建好了，模板默认实现了一个GreetService，包含一个SayHello方法<br><img src="vs_grpc_start_four.PNG" alt="gRPC模板默认的项目结构"></p></li></ol><h3 id="熟悉模板项目中的文件及配置"><a class="header-anchor" href="#熟悉模板项目中的文件及配置">¶</a>熟悉模板项目中的文件及配置</h3><ol><li><p>第一眼看上去，发现Protos文件夹下面有一个greet.proto文件，*.proto扩展名的文件为ProtoBuf的定义文件，我们来看下这个文件的内容：</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">"proto3"</span>; <span class="comment">// 指定使用的protobuf版本，如果不指定，默认使用proto2。如果指定，则必须在文件的非空非注释的第一行。</span></span><br><span class="line"></span><br><span class="line">option csharp_namespace = <span class="string">"MyGrpcService"</span>; <span class="comment">// 指定C#的命名空间</span></span><br><span class="line"></span><br><span class="line">package greet; <span class="comment">// 定义包名称，该行是可选的,可以为.proto文件新增一个可选的package声明符，用来防止不同的消息类型有命名冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务定义</span></span><br><span class="line">service Greeter &#123;</span><br><span class="line"><span class="comment">// 方法定义</span></span><br><span class="line"><span class="function">rpc <span class="title">SayHello</span> (<span class="params">HelloRequest</span>) <span class="title">returns</span> (<span class="params">HelloReply</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求消息模型</span></span><br><span class="line">message HelloRequest &#123;</span><br><span class="line"><span class="keyword">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应消息模型</span></span><br><span class="line">message HelloReply &#123;</span><br><span class="line"><span class="keyword">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据以上ProtoBuf的定义，ProtoBuf编译器<code>protoc</code>会自动在MyGrpcService命名空间下生成名为Greeter的gRPC服务契约<strong>抽像</strong>代理类，文件存放位置<code>\MyGrpcService\obj\Debug\netcoreapp3.1\GreetGrpc.cs</code>。</p></li><li><p>另外appsettings.json里最后有如下一个针对Kestrel服务器的配置，可以看到gRPC服务默认是使用HTTP/2来通信的。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"Kestrel": &#123;</span><br><span class="line">    "EndpointDefaults": &#123;</span><br><span class="line">        "Protocols": "Http2"</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Kestrel服务端点可以通过配置来支持HTTP1.1、HTTP2或者同时支持二者。当服务端点支持多种协议的话，TLS(Transport Layer Security)应用程序层协议协商(Application-Layer Protocol Negotiation, ALPN) 握手可用于协商客户端与服务器之间的连接协议，此协商确定连接是使用HTTP/1.1还是HTTP/2。</p></li><li><p>如果在不使用TLS的情况下配置了HTTP/2服务端点，则必须将服务端点的ListenOptions.Protocols设置为<code>HttpProtocols.Http2</code>。因为没有TLS，如果使用具有多个协议（例如HttpProtocols.Http1AndHttp2）的服务端点，则没有办法协商。到不安全服务端点的所有连接均默认为HTTP/1.1，且gRPC调用会失败。<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup><br>后面我们可以专门写下“不使用TLS的情况下配置了HTTP/2服务端点”的场景，以及代码实现。</p></li></ul></li></ol><h3 id="如何实现gRPC服务"><a class="header-anchor" href="#如何实现gRPC服务">¶</a>如何实现gRPC服务</h3><ol><li>上面我们提到ProtoBuf编译器会根据proto文件自动生成gRPC服务契约抽象代理类，那如果要提供真正的gRPC服务，我们需要实现具体的服务契约方法。现在我们来打开Services\MyGrpcService.cs文件。<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">MyGrpcService</span></span><br><span class="line"> &#123;</span><br><span class="line">     public class GreeterService : Greeter.GreeterBase  // Greeter.GreeterBase即为上面所谓的gRPC服务契约抽象代理类</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;GreeterService&gt; _logger;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="title">GreeterService</span>(<span class="params">ILogger&lt;GreeterService&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             _logger = logger;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 通过override来实现SayHello服务方法</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> Task&lt;HelloReply&gt; <span class="title">SayHello</span>(<span class="params">HelloRequest request, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function"></span>         &#123;</span><br><span class="line">             <span class="keyword">return</span> Task.FromResult(<span class="keyword">new</span> HelloReply</span><br><span class="line">             &#123;</span><br><span class="line">                 Message = <span class="string">"Hello "</span> + request.Name</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>仅有上面的gRPC服务实现是不够的的，我们还需要将它映射到服务器端点路由里。对的，Startup.cs文件中下面的一行代码正是为了实现这样的效果。 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    app.UseRouting();</span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapGrpcService&lt;GreeterService&gt;();  <span class="comment">// &lt;---- 说的是这一行代码</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>既然打开了Startup.cs文件，那顺便再抬头往上看几行，发现在ConfigureServices方法中有一行代码<code>services.AddGrpc();</code>，没错，这一行代码表示需要启动的是gRPC服务。</li></ol><h3 id="运行gRPC服务"><a class="header-anchor" href="#运行gRPC服务">¶</a>运行gRPC服务</h3><p>说了那么多，现在我们把这个模板项目跑起来，看看神秘的gRPC服务运行起来到底是啥样的。</p><ol><li><p>在Visual Studio开发环境中，启动项目最直接的就是按下F5（当然也可以通过命令行dotnet run来启动）。通过Visual Stuido第一运行gRPC服务的时候，会弹出一个是否信任AspNetCore SSL证书的确认框，点击[<strong>Yes</strong>]即可，下一步点击[<strong>是</strong>]安装证书。<br><img src="vs_grpc_cert_dialog.PNG" alt=""><br><img src="vs_grpc_cert_install.PNG" alt=""></p></li><li><p>现在gRPC服务就可以跑起来了，你会看到如下的命令行输出，通过打出来的日志<code>https://localhost:5001</code>，https表明启动的是受TLS保护的服务端点。<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup><br><img src="aspnetcore_grpc_console.PNG" alt=""></p></li></ol><h3 id="结语"><a class="header-anchor" href="#结语">¶</a>结语</h3><p>到这里我们就把一个基于AspNetCore的gRPC模板项目分析的差不多了，后续我们将继续探索如何实现一个客户端来访问这个SayHello的gPRC服务。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://grpc.io/docs/what-is-grpc/introduction" target="_blank" rel="noopener">https://grpc.io/docs/what-is-grpc/introduction</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.0&amp;tabs=visual-studio#protocol-negotiation" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.0&amp;tabs=visual-studio#protocol-negotiation</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.0&amp;tabs=visual-studio#tls" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/aspnet/core/grpc/aspnetcore?view=aspnetcore-3.0&amp;tabs=visual-studio#tls</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;gRPC最早是由Google开发，是一款现代、开源、高性能的RPC框架。默认gRPC使用Protocol Buffer作为服务的接口定义语言（Interface Definition Language, IDL）和信息交换格式，支持多种语言，支持客户端、服务器以及双向流式调
      
    
    </summary>
    
    
    
      <category term="dotNetCore" scheme="https://jeremylj.github.io/tags/dotNetCore/"/>
    
      <category term="gRPC" scheme="https://jeremylj.github.io/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>你好，博客</title>
    <link href="https://jeremylj.github.io/2020/04/10/hello/"/>
    <id>https://jeremylj.github.io/2020/04/10/hello/</id>
    <published>2020-04-10T11:23:27.000Z</published>
    <updated>2020-12-30T22:34:29.711Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
</feed>
